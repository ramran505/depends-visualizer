name: Build Depends Visualizer

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    defaults:
      run:
        working-directory: app

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v3

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: üì¶ Install Python deps
        run: pip install pyinstaller

      - name: üß© Install Graphviz
        shell: bash
        run: |
          echo "Installing Graphviz..."
          rm -rf graphviz  # üî• clean previous
          mkdir -p graphviz

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            curl -L -o gv.zip https://gitlab.com/api/v4/projects/4207231/packages/generic/graphviz-releases/13.1.1/windows_10_cmake_Release_Graphviz-13.1.1-win64.zip
            unzip -q gv.zip
            INNER_DIR=$(find . -type d -iname "Graphviz*" | head -n 1)
            echo "Graphviz extracted to: $INNER_DIR"
            shopt -s dotglob
            mv "$INNER_DIR"/* graphviz/
            rm -rf "$INNER_DIR"
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            curl -L https://gitlab.com/api/v4/projects/4207231/packages/generic/graphviz-releases/13.1.1/graphviz-13.1.1.tar.gz | tar xz
            INNER_DIR=$(find . -type d -iname "graphviz*" | head -n 1)
            echo "Graphviz extracted to: $INNER_DIR"
            shopt -s dotglob
            mv "$INNER_DIR"/* graphviz/
            rm -rf "$INNER_DIR"
          fi

    echo "‚úÖ Graphviz directory listing:"
    find graphviz

      - name: üçé Install Graphviz (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install graphviz

      - name: ‚òï Install OpenJDK
        shell: bash
        run: |
          echo "Installing OpenJDK..."
          rm -rf openjdk
          mkdir -p openjdk

          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "Installing OpenJDK for Windows..."
            curl -L -o jdk.zip "https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.8%2B9/OpenJDK21U-jdk_x64_windows_hotspot_21.0.8_9.zip"
            unzip -q jdk.zip
            EXTRACTED=$(find . -maxdepth 1 -type d -iname "jdk-*" | head -n 1)
            shopt -s dotglob
            mv "$EXTRACTED"/* openjdk/
            rm -rf "$EXTRACTED"

          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            echo "Installing OpenJDK for macOS..."
            curl -L "https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.8%2B9/OpenJDK21U-jdk_x64_mac_hotspot_21.0.8_9.tar.gz" | tar xz
            EXTRACTED=$(find . -maxdepth 1 -type d -iname "jdk-*" | head -n 1)
            shopt -s dotglob
            mv "$EXTRACTED"/* openjdk/
            rm -rf "$EXTRACTED"

          else
            echo "Installing OpenJDK for Linux..."
            curl -L "https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.8%2B9/OpenJDK21U-jdk_x64_linux_hotspot_21.0.8_9.tar.gz" | tar xz
            EXTRACTED=$(find . -maxdepth 1 -type d -iname "jdk-*" | head -n 1)
            shopt -s dotglob
            mv "$EXTRACTED"/* openjdk/
            rm -rf "$EXTRACTED"
          fi

      - name: üß∞ Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: üîß Add Bun to Windows PATH manually
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $bunPath = "$env:USERPROFILE\.bun\bin"
          echo "Bun installed in $bunPath"
          echo "$bunPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: ‚öôÔ∏è Build dep-visualizer with Bun
        working-directory: app/dep-visualizer
        run: |
          bun install
          bun run build

      - name: üõ†Ô∏è Build with PyInstaller
        run: pyinstaller depends_visualize.spec --noconfirm

      - name: üßê Verify Graphviz
        run: |
          echo "Checking Graphviz..."
          ls -R graphviz/bin
          if [[ ! -f graphviz/bin/dot && ! -f graphviz/bin/dot.exe ]]; then
            echo "‚ùå dot not found"
            exit 1
          fi
        shell: bash

      - name: üìÑ Show dist contents
        if: matrix.os == 'windows-latest'
        run: dir dist

      - name: üì§ Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: depends_visualize-${{ matrix.os }}
          path: app/dist/depends_visualize*
