name: Build Depends Visualizer

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    defaults:
      run:
        working-directory: app

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v3

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: 📦 Install Python deps
        run: pip install pyinstaller

      - name: 🧩 Install Graphviz
        shell: bash
        run: |
          echo "Installing Graphviz..."
          rm -rf graphviz
          mkdir -p graphviz

          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "Installing Graphviz for Windows..."
            curl -L -o gv.zip https://gitlab.com/api/v4/projects/4207231/packages/generic/graphviz-releases/13.1.1/windows_10_cmake_Release_Graphviz-13.1.1-win64.zip
            unzip -q gv.zip
            EXTRACTED=$(find . -maxdepth 1 -type d -iname "Graphviz*" | head -n 1)
            if [[ "$EXTRACTED" != "./graphviz" ]]; then
              shopt -s dotglob
              mv "$EXTRACTED"/* graphviz/
              rm -rf "$EXTRACTED"
            fi

          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            echo "Installing Graphviz for macOS..."
            brew install graphviz

          else
            echo "Installing Graphviz for Linux..."
            curl -L https://gitlab.com/api/v4/projects/4207231/packages/generic/graphviz-releases/13.1.1/graphviz-13.1.1.tar.gz | tar xz
            EXTRACTED=$(find . -maxdepth 1 -type d -iname "graphviz*" | head -n 1)
            if [[ "$EXTRACTED" != "./graphviz" ]]; then
              shopt -s dotglob
              mv "$EXTRACTED"/* graphviz/
              rm -rf "$EXTRACTED"
            fi
          fi

      - name: 🍎 Install Graphviz (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install graphviz

      - name: ☕ Install OpenJDK
        shell: bash
        run: |
          echo "Installing OpenJDK..."
          rm -rf openjdk
          mkdir -p openjdk

          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "Installing OpenJDK for Windows..."
            curl -L -o jdk.zip "https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.8%2B9/OpenJDK21U-jdk_x64_windows_hotspot_21.0.8_9.zip"
            unzip -q jdk.zip
            EXTRACTED=$(find . -maxdepth 1 -type d -iname "jdk-*" | head -n 1)
            shopt -s dotglob
            mv "$EXTRACTED"/* openjdk/
            rm -rf "$EXTRACTED"

          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            echo "Installing OpenJDK for macOS..."
            curl -L "https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.8%2B9/OpenJDK21U-jdk_x64_mac_hotspot_21.0.8_9.tar.gz" | tar xz
            EXTRACTED=$(find . -maxdepth 1 -type d -iname "jdk-*" | head -n 1)
            shopt -s dotglob
            mv "$EXTRACTED"/* openjdk/
            rm -rf "$EXTRACTED"

          else
            echo "Installing OpenJDK for Linux..."
            curl -L "https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.8%2B9/OpenJDK21U-jdk_x64_linux_hotspot_21.0.8_9.tar.gz" | tar xz
            EXTRACTED=$(find . -maxdepth 1 -type d -iname "jdk-*" | head -n 1)
            shopt -s dotglob
            mv "$EXTRACTED"/* openjdk/
            rm -rf "$EXTRACTED"
          fi

      # ----------------- Setup Bun -----------------
      - name: 🧰 Install Bun
        shell: bash
        run: |
          curl -fsSL https://bun.sh/install | bash
          echo "$HOME/.bun/bin" >> $GITHUB_PATH

      # ----------------- Build dep-visualizer -----------------
      - name: ⚙️ Build dep-visualizer with Bun
        working-directory: app/dep-visualizer
        shell: bash
        run: |
          bun install
          bun run build

      - name: 🛠️ Build dep-visualizer
        working-directory: app/dep-visualizer
        run: bun run build


      - name: 🛠️ Build with PyInstaller
        run: pyinstaller depends_visualize.spec --noconfirm

      - name: 📄 Show dist contents
        if: matrix.os == 'windows-latest'
        run: dir dist

      - name: 📤 Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: depends_visualize-${{ matrix.os }}
          path: app/dist/depends_visualize*
